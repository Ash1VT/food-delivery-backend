generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id BigInt @id

  orders Order[]

  @@map("customers")
}

model Courier {
  id BigInt @id

  orders Order[]

  @@map("couriers")
}

model Moderator {
  id BigInt @id

  @@map("moderators")
}

model RestaurantManager {
  id           BigInt  @id
  restaurantId BigInt? @unique @map("restaurant_id")

  restaurant Restaurant? @relation(fields: [restaurantId], references: [id])

  @@map("restaurant_managers")
}

model Restaurant {
  id                BigInt             @id
  restaurantManager RestaurantManager?

  orders     Order[]
  menuItem   MenuItem[]
  promocodes Promocode[]

  @@map("restaurants")
}

model Promotion {
  id     BigInt  @id
  orders Order[]

  @@map("promotions")
}

model Promocode {
  id                 BigInt   @id @default(autoincrement())
  nameIdentifier     String   @map("name_identifier") @db.VarChar(25)
  discountPercentage Int      @map("discount_percentage")
  validFrom          DateTime @map("valid_from") @db.Timestamptz()
  validUntil         DateTime @map("valid_until") @db.Timestamptz()
  maxUsageCount      Int      @map("max_usage_count")
  currentUsageCount  Int      @default(0) @map("current_usage_count")
  isActive           Boolean  @default(true) @map("is_active")
  restaurantId       BigInt   @map("restaurant_id")

  orders     Order[]
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])

  @@map("promocodes")
}

model MenuItem {
  id           BigInt @id
  name         String
  imageUrl     String @map("image_url")
  price        Float
  restaurantId BigInt @map("restaurant_id")

  restaurant Restaurant @relation(fields: [restaurantId], references: [id])

  @@map("menu_items")
}

model OrderItem {
  id BigInt @id @default(autoincrement())

  //menuItemId BigInt @map("menu_item_id")

  menuItemPrice Float  @map("menu_item_price")
  menuItemName  String @map("menu_item_name")
  menuItemImage String @map("menu_item_image_url")
  orderId       BigInt @map("order_id")
  quantity      Int

  order Order @relation(fields: [orderId], references: [id])

  @@map("order_items")
}

model Order {
  id                   BigInt      @id @default(autoincrement())
  customerId           BigInt      @map("customer_id")
  courierId            BigInt?     @map("courier_id")
  restaurantId         BigInt      @map("restaurant_id")
  promocodeId          BigInt?     @map("promocode_id")
  promotionId          BigInt?     @map("promotion_id")
  status               OrderStatus @default(PENDING)
  createdAt            DateTime    @default(now()) @map("created_at") @db.Timestamptz()
  deliveryAcceptedAt   DateTime?   @map("delivery_accepted_at") @db.Timestamptz()
  supposedDeliveryTime DateTime    @map("supposed_delivery_time") @db.Time()
  actualDeliveryTime   DateTime?   @map("actual_delivery_time") @db.Time()
  deliveryFinishedAt   DateTime?   @map("delivery_finished_at") @db.Timestamptz()
  totalPrice           Float       @map("total_price")
  decountedPrice       Float       @map("decounted_price")

  customer   Customer    @relation(fields: [customerId], references: [id])
  courier    Courier?    @relation(fields: [courierId], references: [id])
  restaurant Restaurant  @relation(fields: [restaurantId], references: [id])
  promocode  Promocode?  @relation(fields: [promocodeId], references: [id])
  promotion  Promotion?  @relation(fields: [promotionId], references: [id])
  items      OrderItem[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERING
  DELIVERED
  CANCELLED

  @@map("order_statuses")
}
